[{"/home/ilyas/Documents/apps-fabrics/dev-frontend/src/container/pages/App/App.js":"1","/home/ilyas/Documents/apps-fabrics/dev-frontend/src/container/pages/Fabric/index.js":"2","/home/ilyas/Documents/apps-fabrics/dev-frontend/src/container/pages/Fabric/createIndex.js":"3","/home/ilyas/Documents/apps-fabrics/dev-frontend/src/services/service.js":"4","/home/ilyas/Documents/apps-fabrics/dev-frontend/src/serviceWorker.js":"5","/home/ilyas/Documents/apps-fabrics/dev-frontend/src/container/pages/Home/Home.js":"6","/home/ilyas/Documents/apps-fabrics/dev-frontend/src/index.js":"7","/home/ilyas/Documents/apps-fabrics/dev-frontend/src/container/pages/Fabric/indexList.js":"8","/home/ilyas/Documents/apps-fabrics/dev-frontend/src/http-common/http-common.js":"9"},{"size":5002,"mtime":1610760102628,"results":"10","hashOfConfig":"11"},{"size":2400,"mtime":1610762001095,"results":"12","hashOfConfig":"11"},{"size":9053,"mtime":1610762342854,"results":"13","hashOfConfig":"11"},{"size":598,"mtime":1610684547900,"results":"14","hashOfConfig":"11"},{"size":5341,"mtime":1610609774992,"results":"15","hashOfConfig":"11"},{"size":145,"mtime":1610684706806,"results":"16","hashOfConfig":"11"},{"size":1077,"mtime":1610693386106,"results":"17","hashOfConfig":"11"},{"size":181,"mtime":1610610347978,"results":"18","hashOfConfig":"11"},{"size":167,"mtime":1610610674676,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1rtci0l",{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ilyas/Documents/apps-fabrics/dev-frontend/src/container/pages/App/App.js",["39","40"],"/home/ilyas/Documents/apps-fabrics/dev-frontend/src/container/pages/Fabric/index.js",["41","42"],"/home/ilyas/Documents/apps-fabrics/dev-frontend/src/container/pages/Fabric/createIndex.js",["43","44","45"],"import React, { useState, useEffect } from 'react';\nimport ServiceFabric from '../.././../services/service';\n\nconst CreateIndex = () => {\n    const initialize = {\n        id: null,\n        fabric_type: \"\",\n        machine_id: \"\",\n        brand: \"\",\n        po_number: \"\",\n    }\n\n    const [fabric, setFabric] = useState(initialize);\n    const [submitted, setSubmitted] = useState(false);\n    const [fabric_, setFabric_] = useState([]);\n\n    const handleInputChange = event => {\n        const { name, value } = event.target;\n        setFabric({ ...fabric, [name]: value });\n        console.log(value)\n    }\n\n    const saveFabric = () => {\n        var data = {\n            fabric_type: fabric.fabric_type,\n            machine_id: fabric.machine_id,\n            brand: fabric.brand,\n            po_number: fabric.po_number\n        };\n\n        ServiceFabric.create(data).then(res => {\n\n            setFabric({\n                id: res.data.id,\n                fabric_type: res.data.fabric_type,\n                machine_id: res.data.machine_id,\n                brand: res.data.brand,\n                po_number: res.data.po_number\n            });\n\n            setSubmitted(true);\n            console.log(console.data);\n        })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    useEffect(async () => {\n        const result = await ServiceFabric.getAll();\n        const data_ = result.data.data\n        setFabric_(data_)\n    })\n\n    const newFabric = () => {\n        setFabric(initialize);\n        setSubmitted(false);\n    };\n\n    return (\n        <div>\n            <div className=\"page-content\">\n                <div className=\"page-header\">\n                    <h1>\n                        Top Menu Style\n            <small>\n                            <i className=\"ace-icon fa fa-angle-double-right\" />\n                            top menu &amp; navigation\n            </small>\n                    </h1>\n                </div>\n                {/* /.page-header */}\n                <div className=\"row\">\n                    <div className=\"col-xs-12\">\n                        {/* PAGE CONTENT BEGINS */}\n                        <div className=\"alert alert-info visible-sm visible-xs\">\n                            <button type=\"button\" className=\"close\" data-dismiss=\"alert\">\n                                <i className=\"ace-icon fa fa-times\" />\n                            </button>\n                            Please note that\n               <span className=\"blue bolder\">top menu style</span>\n                            is visible only in devices larger than\n               <span className=\"blue bolder\">991px</span>\n                            which you can change using CSS builder tool.\n            </div>\n                        <div className=\"submit-form\">\n                            <div>\n                                <h1>Submit</h1>\n                                <button className=\"btn btn-sm btn-primary\" onClick={newFabric}>Add</button>\n\n                                <table className=\"table table-boreder table-stripped table-hover\">\n                                    <thead>\n                                        <tr>\n                                            <th>No</th>\n                                            <th>Fabric Types</th>\n                                            <th>Brand</th>\n                                            <th>PO Number</th>\n                                            <th>Created At</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {fabric_.map((row) => {\n                                            return (<tr>\n                                                <td>{row.id}</td>\n                                                <td>{row.fabric_type}</td>\n                                                <td>{row.brand}</td>\n                                                <td>{row.po_number}</td>\n                                                <td>{row.created_at}</td>\n                                            </tr>)\n                                        })}\n                                    </tbody>\n                                </table>\n                            </div>\n                            <div className=\"card\">\n                                <div className=\"card-body\">\n                                    <div className=\"col-12-xs col-12-md col-12-sm\">\n                                        <div className=\"row\">\n                                            <div className=\"col-md-12 col-sm-6\">\n                                                <div className=\"from-group\">\n                                                    <label htmlFor=\"fabric-type\">Fabirc Type</label>\n                                                    <input type=\"text\"\n                                                        className=\"form-control\"\n                                                        id=\"fabric_type\"\n                                                        required value={fabric.fabric_type}\n                                                        onChange={handleInputChange}\n                                                        name=\"fabric_type\"\n                                                        autoComplete=\"off\" />\n                                                </div>\n                                            </div>\n                                            <div className=\"col-md-12 col-sm-6\">\n                                                <div className=\"from-group\">\n                                                    <label htmlFor=\"machine_id\">Machine Type</label>\n                                                    <input type=\"text\"\n                                                        className=\"form-control\"\n                                                        id=\"machine_id\"\n                                                        required value={fabric.machine_id}\n                                                        onChange={handleInputChange}\n                                                        name=\"machine_id\"\n                                                        autoComplete=\"off\" />\n                                                </div>\n                                            </div>\n                                            <div className=\"col-md-12 col-sm-6\">\n                                                <div className=\"from-group\">\n                                                    <label htmlFor=\"brand\">Brand</label>\n                                                    <input type=\"text\"\n                                                        className=\"form-control\"\n                                                        id=\"brand\"\n                                                        required value={fabric.brand}\n                                                        onChange={handleInputChange}\n                                                        name=\"brand\"\n                                                        autoComplete=\"off\" />\n                                                </div>\n                                            </div>\n                                            <div className=\"col-md-12 col-sm-6\">\n                                                <div className=\"from-group\">\n                                                    <label htmlFor=\"po_number\">PO Number</label>\n                                                    <input type=\"text\"\n                                                        className=\"form-control\"\n                                                        id=\"po_number\"\n                                                        required value={fabric.po_number}\n                                                        onChange={handleInputChange}\n                                                        name=\"po_number\"\n                                                        autoComplete=\"off\" />\n                                                </div>\n                                            </div>\n                                            <div className=\"col-md-12 col-sm-12\">\n                                                <div className=\"form-group\">\n                                                    <button onClick={saveFabric} className=\"btn btn-sm btn-primary\">\n                                                        Submit\n                                        </button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        )}\n                        </div>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\n\nexport default CreateIndex;","/home/ilyas/Documents/apps-fabrics/dev-frontend/src/services/service.js",["46"],"/home/ilyas/Documents/apps-fabrics/dev-frontend/src/serviceWorker.js",[],"/home/ilyas/Documents/apps-fabrics/dev-frontend/src/container/pages/Home/Home.js",[],"/home/ilyas/Documents/apps-fabrics/dev-frontend/src/index.js",[],"/home/ilyas/Documents/apps-fabrics/dev-frontend/src/container/pages/Fabric/indexList.js",[],"/home/ilyas/Documents/apps-fabrics/dev-frontend/src/http-common/http-common.js",[],{"ruleId":"47","severity":1,"message":"48","line":2,"column":10,"nodeType":"49","messageId":"50","endLine":2,"endColumn":14},{"ruleId":"51","severity":1,"message":"52","line":94,"column":17,"nodeType":"53","endLine":94,"endColumn":57},{"ruleId":"54","severity":1,"message":"55","line":7,"column":5,"nodeType":"49","endLine":7,"endColumn":14,"suggestions":"56"},{"ruleId":"54","severity":1,"message":"57","line":7,"column":16,"nodeType":"58","endLine":11,"endColumn":6},{"ruleId":"47","severity":1,"message":"59","line":14,"column":12,"nodeType":"49","messageId":"50","endLine":14,"endColumn":21},{"ruleId":"54","severity":1,"message":"55","line":49,"column":5,"nodeType":"49","endLine":49,"endColumn":14,"suggestions":"60"},{"ruleId":"54","severity":1,"message":"57","line":49,"column":15,"nodeType":"58","endLine":53,"endColumn":6},{"ruleId":"61","severity":1,"message":"62","line":27,"column":1,"nodeType":"63","endLine":34,"endColumn":5},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setFabric_'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["64"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'submitted' is assigned a value but never used.",["65"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"66","fix":"67"},{"desc":"66","fix":"68"},"Add dependencies array: []",{"range":"69","text":"70"},{"range":"71","text":"70"},[331,331],", []",[1456,1456]]